<?xml version="1.0" encoding="utf-8"?>

<launch>

  <!-- Start gazebo server with turtlebot3_house scene. -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!-- Documentation taken from http://gazebosim.org/tutorials?tut=ros_roslaunch-->
    <arg name="world_name" value="$(find turtlebot3_gazebo)/worlds/turtlebot3_empty_world.world"/>
    <arg name="paused" value="false"/> <!--S tart Gazebo in a paused state-->
    <arg name="use_sim_time" value="true"/> <!-- Tells ROS nodes asking for time to get the Gazebo-published simulation time, published over the ROS topic /clock-->
    <arg name="gui" value="true"/> <!-- Launch the user interface window of Gazebo-->
    <!-- <arg name="headless" value="false"/> Enable gazebo state log recording -->
    <!-- <arg name="debug" value="false"/> Start gzserver (Gazebo Server) in debug mode using gdb -->
  </include>
  
  <!-- Load robot_description param for tf, rviz and gazebo spawn. -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_waffle.urdf.xacro"/>


  <!-- Spawn turtlebot into gazebo based on robot_description. -->
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model"
        args="-urdf -model turtlebot3 -x 0 -y 1 -z 0 -param robot_description"/>


  <!-- Publish turtlebot3 tf's. -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="waffle_state_publisher"/>

<!-- To this stage all topics are present exept the pose topic -->

  <!-- Publish tf 'base_footprint' as pose.-->
  <node pkg="elevation_mapping_demos" type="tf_to_pose_publisher.py" name="waffle_pose_publisher">
    <param name="from_frame" type="string" value="odom"/>
    <param name="to_frame" type="string" value="base_footprint"/>
  </node>

<!-- transformation of both weels break if the node is appled -->

  <!-- Launch elevation mapping node. -->
  <node pkg="elevation_mapping" type="elevation_mapping" name="elevation_mapping" output="screen">
    <rosparam command="load" file="$(find elevation_mapping_demos)/config/robots/my_waffle_robot.yaml"/>
    <rosparam command="load" file="$(find elevation_mapping_demos)/config/postprocessing/postprocessor_pipeline.yaml"/>
  </node>

</launch>   
